AWSTemplateFormatVersion: 2010-09-09

Resources:
  DB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: MERCHANT
      DBInstanceClass: db.t2.small
      DBClusterIdentifier: test
      DeletionProtection: false
      Engine: mysql
      MasterUsername: user
      MasterUserPassword: password
      Port: 3306
      StorageEncrypted: true
Outputs:
  ENDPOINT:
    Description: "DB ENDPOINT"
    Value:
      Fn::GetAtt:
        - DB
        - Endpoint.Address
  Endpoint.Address, Endpoint.Port, ReadEndpoint.Address
  CatalogAutoScalingRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Condition: { }
            Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - application-autoscaling:*
                  - ecs:DescribeServices
                  - ecs:UpdateService
                  - cloudwatch:GetMetricStatistics
                Condition: { }
                Effect: Allow
                Principal: { }
                Resource:
                  - Ref: CatalogService
          PolicyName: service-autoscaling
      Tags:
        - Key: com.docker.compose.project
          Value: aws
        - Key: com.docker.compose.service
          Value: catalog
    Type: AWS::IAM::Role
#  CatalogScalableTarget:
#    DependsOn:
#      - CatalogService
#    Properties:
#      MaxCapacity: 10
#      MinCapacity: 1
#      ResourceId:
#        Fn::Join:
#          - /
#          - - service
#            - Ref: Cluster
#            - Fn::GetAtt:
#                - CatalogService
#                - Name
#      RoleARN:
#        Fn::GetAtt:
#          - CatalogAutoScalingRole
#          - Arn
#      ScalableDimension: ecs:service:DesiredCount
#      ServiceNamespace: ecs
#    Type: AWS::ApplicationAutoScaling::ScalableTarget
#  CatalogScalingPolicy:
#    Properties:
#      PolicyName: CatalogScalingPolicy
#      PolicyType: TargetTrackingScaling
#      ScalingTargetId:
#        Ref: CatalogScalableTarget
#      TargetTrackingScalingPolicyConfiguration:
#        PredefinedMetricSpecification:
#          PredefinedMetricType: ECSServiceAverageCPUUtilization
#        ScaleInCooldown: 60
#        ScaleOutCooldown: 60
#        TargetValue: 75
#    Type: AWS::ApplicationAutoScaling::ScalingPolicy
#  CatalogService:
#    Properties:
#      Cluster:
#        Fn::GetAtt:
#          - Cluster
#          - Arn
#      DeploymentConfiguration:
#        MaximumPercent: 200
#        MinimumHealthyPercent: 100
#      DeploymentController:
#        Type: ECS
#      DesiredCount: 1
#      LaunchType: FARGATE
#      NetworkConfiguration:
#        AwsvpcConfiguration:
#          AssignPublicIp: ENABLED
#          SecurityGroups:
#            - Ref: DefaultNetwork
#          Subnets:
#            - subnet-dc0efb83
#            - subnet-7d4c1315
#            - subnet-59cca423
#      PlatformVersion: 1.4.0
#      PropagateTags: SERVICE
#      SchedulingStrategy: REPLICA
#      ServiceRegistries:
#        - RegistryArn:
#            Fn::GetAtt:
#              - CatalogServiceDiscoveryEntry
#              - Arn
#      Tags:
#        - Key: com.docker.compose.project
#          Value: aws
#        - Key: com.docker.compose.service
#          Value: catalog
#      TaskDefinition:
#        Ref: CatalogTaskDefinition
#    Type: AWS::ECS::Service
#  CatalogServiceDiscoveryEntry:
#    Properties:
#      Description: '"catalog" service discovery entry in Cloud Map'
#      DnsConfig:
#        DnsRecords:
#          - TTL: 60
#            Type: A
#        RoutingPolicy: MULTIVALUE
#      HealthCheckCustomConfig:
#        FailureThreshold: 1
#      Name: catalog
#      NamespaceId:
#        Ref: CloudMap
#    Type: AWS::ServiceDiscovery::Service
#  CatalogTaskDefinition:
#    Properties:
#      ContainerDefinitions:
#        - Command:
#            - ca-central-1.compute.internal
#            - aws.local
#          Essential: false
#          Image: docker/ecs-searchdomain-sidecar:1.0
#          LogConfiguration:
#            LogDriver: awslogs
#            Options:
#              awslogs-group:
#                Ref: LogGroup
#              awslogs-region:
#                Ref: AWS::Region
#              awslogs-stream-prefix: aws
#          Name: Catalog_ResolvConf_InitContainer
#        - DependsOn:
#            - Condition: SUCCESS
#              ContainerName: Catalog_ResolvConf_InitContainer
#          Environment:
#            - Name: CORS_ORIGIN
#              Value: http://127.0.0.1:3000/
#            - Name: DB
#              Value: MERCHANT
#            - Name: EXPRESS_PORT
#              Value: "80"
#            - Name: HOST
#              Value: 0.tcp.ngrok.io
#            - Name: PASSWORD
#              Value: password
#            - Name: PORT
#              Value: "17096"
#            - Name: USER
#              Value: user
#          Essential: true
#          Image: 106647883331.dkr.ecr.ca-central-1.amazonaws.com/merchant/catalog:latest@sha256:1089c0ddc823aa09bf526d84a645d05f8394e98a1acfa3b4240b20703a03a81b
#          LinuxParameters: { }
#          LogConfiguration:
#            LogDriver: awslogs
#            Options:
#              awslogs-group:
#                Ref: LogGroup
#              awslogs-region:
#                Ref: AWS::Region
#              awslogs-stream-prefix: aws
#          Name: catalog
#      Cpu: "256"
#      ExecutionRoleArn:
#        Ref: CatalogTaskExecutionRole
#      Family: aws-catalog
#      Memory: "512"
#      NetworkMode: awsvpc
#      RequiresCompatibilities:
#        - FARGATE
#    Type: AWS::ECS::TaskDefinition
#  CatalogTaskExecutionRole:
#    Properties:
#      AssumeRolePolicyDocument:
#        Statement:
#          - Action:
#              - sts:AssumeRole
#            Condition: { }
#            Effect: Allow
#            Principal:
#              Service: ecs-tasks.amazonaws.com
#        Version: 2012-10-17
#      ManagedPolicyArns:
#        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
#        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
#      Tags:
#        - Key: com.docker.compose.project
#          Value: aws
#        - Key: com.docker.compose.service
#          Value: catalog
#    Type: AWS::IAM::Role
#  CloudMap:
#    Properties:
#      Description: Service Map for Docker Compose project aws
#      Name: aws.local
#      Vpc: vpc-12644d7a
#    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
#  Cluster:
#    Properties:
#      ClusterName: aws
#      Tags:
#        - Key: com.docker.compose.project
#          Value: aws
#    Type: AWS::ECS::Cluster
#  Default80Ingress:
#    Properties:
#      CidrIp: 0.0.0.0/0
#      Description: nginx:80/tcp on default network
#      FromPort: 80
#      GroupId:
#        Ref: DefaultNetwork
#      IpProtocol: TCP
#      ToPort: 80
#    Type: AWS::EC2::SecurityGroupIngress
#  DefaultNetwork:
#    Properties:
#      GroupDescription: aws Security Group for default network
#      Tags:
#        - Key: com.docker.compose.project
#          Value: aws
#        - Key: com.docker.compose.network
#          Value: aws_default
#      VpcId: vpc-12644d7a
#    Type: AWS::EC2::SecurityGroup
#  DefaultNetworkIngress:
#    Properties:
#      Description: Allow communication within network default
#      GroupId:
#        Ref: DefaultNetwork
#      IpProtocol: "-1"
#      SourceSecurityGroupId:
#        Ref: DefaultNetwork
#    Type: AWS::EC2::SecurityGroupIngress
#  LoadBalancer:
#    Properties:
#      Scheme: internet-facing
#      SecurityGroups:
#        - Ref: DefaultNetwork
#      Subnets:
#        - subnet-dc0efb83
#        - subnet-7d4c1315
#        - subnet-59cca423
#      Tags:
#        - Key: com.docker.compose.project
#          Value: aws
#      Type: application
#    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
#  LogGroup:
#    Properties:
#      LogGroupName: /docker-compose/aws
#    Type: AWS::Logs::LogGroup
#  NginxAutoScalingRole:
#    Properties:
#      AssumeRolePolicyDocument:
#        Statement:
#          - Action:
#              - sts:AssumeRole
#            Condition: { }
#            Effect: Allow
#            Principal:
#              Service: application-autoscaling.amazonaws.com
#        Version: 2012-10-17
#      Path: /
#      Policies:
#        - PolicyDocument:
#            Statement:
#              - Action:
#                  - application-autoscaling:*
#                  - ecs:DescribeServices
#                  - ecs:UpdateService
#                  - cloudwatch:GetMetricStatistics
#                Condition: { }
#                Effect: Allow
#                Principal: { }
#                Resource:
#                  - Ref: NginxService
#          PolicyName: service-autoscaling
#      Tags:
#        - Key: com.docker.compose.project
#          Value: aws
#        - Key: com.docker.compose.service
#          Value: nginx
#    Type: AWS::IAM::Role
#  NginxScalableTarget:
#    DependsOn:
#      - NginxService
#    Properties:
#      MaxCapacity: 10
#      MinCapacity: 1
#      ResourceId:
#        Fn::Join:
#          - /
#          - - service
#            - Ref: Cluster
#            - Fn::GetAtt:
#                - NginxService
#                - Name
#      RoleARN:
#        Fn::GetAtt:
#          - NginxAutoScalingRole
#          - Arn
#      ScalableDimension: ecs:service:DesiredCount
#      ServiceNamespace: ecs
#    Type: AWS::ApplicationAutoScaling::ScalableTarget
#  NginxScalingPolicy:
#    Properties:
#      PolicyName: NginxScalingPolicy
#      PolicyType: TargetTrackingScaling
#      ScalingTargetId:
#        Ref: NginxScalableTarget
#      TargetTrackingScalingPolicyConfiguration:
#        PredefinedMetricSpecification:
#          PredefinedMetricType: ECSServiceAverageCPUUtilization
#        ScaleInCooldown: 60
#        ScaleOutCooldown: 60
#        TargetValue: 75
#    Type: AWS::ApplicationAutoScaling::ScalingPolicy
#  NginxService:
#    DependsOn:
#      - NginxTCP80Listener
#    Properties:
#      Cluster:
#        Fn::GetAtt:
#          - Cluster
#          - Arn
#      DeploymentConfiguration:
#        MaximumPercent: 200
#        MinimumHealthyPercent: 100
#      DeploymentController:
#        Type: ECS
#      DesiredCount: 1
#      LaunchType: FARGATE
#      LoadBalancers:
#        - ContainerName: nginx
#          ContainerPort: 80
#          TargetGroupArn:
#            Ref: NginxTCP80TargetGroup
#      NetworkConfiguration:
#        AwsvpcConfiguration:
#          AssignPublicIp: ENABLED
#          SecurityGroups:
#            - Ref: DefaultNetwork
#          Subnets:
#            - subnet-dc0efb83
#            - subnet-7d4c1315
#            - subnet-59cca423
#      PlatformVersion: 1.4.0
#      PropagateTags: SERVICE
#      SchedulingStrategy: REPLICA
#      ServiceRegistries:
#        - RegistryArn:
#            Fn::GetAtt:
#              - NginxServiceDiscoveryEntry
#              - Arn
#      Tags:
#        - Key: com.docker.compose.project
#          Value: aws
#        - Key: com.docker.compose.service
#          Value: nginx
#      TaskDefinition:
#        Ref: NginxTaskDefinition
#    Type: AWS::ECS::Service
#  NginxServiceDiscoveryEntry:
#    Properties:
#      Description: '"nginx" service discovery entry in Cloud Map'
#      DnsConfig:
#        DnsRecords:
#          - TTL: 60
#            Type: A
#        RoutingPolicy: MULTIVALUE
#      HealthCheckCustomConfig:
#        FailureThreshold: 1
#      Name: nginx
#      NamespaceId:
#        Ref: CloudMap
#    Type: AWS::ServiceDiscovery::Service
#  NginxTCP80Listener:
#    Properties:
#      DefaultActions:
#        - ForwardConfig:
#            TargetGroups:
#              - TargetGroupArn:
#                  Ref: NginxTCP80TargetGroup
#          Type: forward
#      LoadBalancerArn:
#        Ref: LoadBalancer
#      Port: 80
#      Protocol: HTTP
#    Type: AWS::ElasticLoadBalancingV2::Listener
#  NginxTCP80TargetGroup:
#    Properties:
#      Port: 80
#      Protocol: HTTP
#      Tags:
#        - Key: com.docker.compose.project
#          Value: aws
#      TargetType: ip
#      VpcId: vpc-12644d7a
#    Type: AWS::ElasticLoadBalancingV2::TargetGroup
#  NginxTaskDefinition:
#    Properties:
#      ContainerDefinitions:
#        - Command:
#            - ca-central-1.compute.internal
#            - aws.local
#          Essential: false
#          Image: docker/ecs-searchdomain-sidecar:1.0
#          LogConfiguration:
#            LogDriver: awslogs
#            Options:
#              awslogs-group:
#                Ref: LogGroup
#              awslogs-region:
#                Ref: AWS::Region
#              awslogs-stream-prefix: aws
#          Name: Nginx_ResolvConf_InitContainer
#        - DependsOn:
#            - Condition: SUCCESS
#              ContainerName: Nginx_ResolvConf_InitContainer
#          Essential: true
#          Image: 106647883331.dkr.ecr.ca-central-1.amazonaws.com/merchant/nginx:latest@sha256:abf55eedc7523acfe9b9eb8ac7957bfbdfc28dc7429219693edc7c2a33aa51ce
#          LinuxParameters: { }
#          LogConfiguration:
#            LogDriver: awslogs
#            Options:
#              awslogs-group:
#                Ref: LogGroup
#              awslogs-region:
#                Ref: AWS::Region
#              awslogs-stream-prefix: aws
#          Name: nginx
#          PortMappings:
#            - ContainerPort: 80
#              HostPort: 80
#              Protocol: tcp
#      Cpu: "256"
#      ExecutionRoleArn:
#        Ref: NginxTaskExecutionRole
#      Family: aws-nginx
#      Memory: "512"
#      NetworkMode: awsvpc
#      RequiresCompatibilities:
#        - FARGATE
#    Type: AWS::ECS::TaskDefinition
#  NginxTaskExecutionRole:
#    Properties:
#      AssumeRolePolicyDocument:
#        Statement:
#          - Action:
#              - sts:AssumeRole
#            Condition: { }
#            Effect: Allow
#            Principal:
#              Service: ecs-tasks.amazonaws.com
#        Version: 2012-10-17
#      ManagedPolicyArns:
#        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
#        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
#      Tags:
#        - Key: com.docker.compose.project
#          Value: aws
#        - Key: com.docker.compose.service
#          Value: nginx
#    Type: AWS::IAM::Role