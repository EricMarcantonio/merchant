AWSTemplateFormatVersion: 2010-09-09
Resources:
  AuthAutoScalingRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: application-autoscaling.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - application-autoscaling:*
            - ecs:DescribeServices
            - ecs:UpdateService
            - cloudwatch:GetMetricStatistics
            Condition: {}
            Effect: Allow
            Principal: {}
            Resource:
            - Ref: AuthService
        PolicyName: service-autoscaling
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      - Key: com.docker.compose.service
        Value: auth
    Type: AWS::IAM::Role
  AuthScalableTarget:
    DependsOn:
    - AuthService
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId:
        Fn::Join:
        - /
        - - service
          - Ref: Cluster
          - Fn::GetAtt:
            - AuthService
            - Name
      RoleARN:
        Fn::GetAtt:
        - AuthAutoScalingRole
        - Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    Type: AWS::ApplicationAutoScaling::ScalableTarget
  AuthScalingPolicy:
    Properties:
      PolicyName: AuthScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: AuthScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        TargetValue: 75
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
  AuthService:
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-136e605e
          - subnet-ce7237ef
          - subnet-623f443d
          - subnet-bc8e0c8d
          - subnet-bfd2add9
          - subnet-a28fbeac
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - AuthServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      - Key: com.docker.compose.service
        Value: auth
      TaskDefinition:
        Ref: AuthTaskDefinition
    Type: AWS::ECS::Service
  AuthServiceDiscoveryEntry:
    Properties:
      Description: '"auth" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: auth
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  AuthTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - aws.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: aws
        Name: Auth_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Auth_ResolvConf_InitContainer
        Environment:
        - Name: CORS_ORIGIN
          Value: http://127.0.0.1:3000
        - Name: DB
          Value: MERCHANT
        - Name: EXPRESS_PORT
          Value: "80"
        - Name: HOST
          Value: database-1.copsfdbli8nn.us-east-1.rds.amazonaws.com
        - Name: PASSWORD
          Value: password
        - Name: PORT
          Value: "3306"
        - Name: USER
          Value: user
        Essential: true
        Image: 106647883331.dkr.ecr.ca-central-1.amazonaws.com/merchant/auth:latest@sha256:9a9e682b86eca21872b643d9b40e4b84159d7adf91e5783c784aa90d57ed60e9
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: aws
        Name: auth
      Cpu: "256"
      ExecutionRoleArn:
        Ref: AuthTaskExecutionRole
      Family: aws-auth
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  AuthTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      - Key: com.docker.compose.service
        Value: auth
    Type: AWS::IAM::Role
  CatalogAutoScalingRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: application-autoscaling.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - application-autoscaling:*
            - ecs:DescribeServices
            - ecs:UpdateService
            - cloudwatch:GetMetricStatistics
            Condition: {}
            Effect: Allow
            Principal: {}
            Resource:
            - Ref: CatalogService
        PolicyName: service-autoscaling
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      - Key: com.docker.compose.service
        Value: catalog
    Type: AWS::IAM::Role
  CatalogScalableTarget:
    DependsOn:
    - CatalogService
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId:
        Fn::Join:
        - /
        - - service
          - Ref: Cluster
          - Fn::GetAtt:
            - CatalogService
            - Name
      RoleARN:
        Fn::GetAtt:
        - CatalogAutoScalingRole
        - Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    Type: AWS::ApplicationAutoScaling::ScalableTarget
  CatalogScalingPolicy:
    Properties:
      PolicyName: CatalogScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: CatalogScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        TargetValue: 75
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
  CatalogService:
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-136e605e
          - subnet-ce7237ef
          - subnet-623f443d
          - subnet-bc8e0c8d
          - subnet-bfd2add9
          - subnet-a28fbeac
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - CatalogServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      - Key: com.docker.compose.service
        Value: catalog
      TaskDefinition:
        Ref: CatalogTaskDefinition
    Type: AWS::ECS::Service
  CatalogServiceDiscoveryEntry:
    Properties:
      Description: '"catalog" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: catalog
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  CatalogTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - aws.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: aws
        Name: Catalog_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Catalog_ResolvConf_InitContainer
        Environment:
        - Name: CORS_ORIGIN
          Value: http://127.0.0.1:3000
        - Name: DB
          Value: MERCHANT
        - Name: EXPRESS_PORT
          Value: "80"
        - Name: HOST
          Value: database-1.copsfdbli8nn.us-east-1.rds.amazonaws.com
        - Name: PASSWORD
          Value: password
        - Name: PORT
          Value: "3306"
        - Name: USER
          Value: user
        Essential: true
        Image: 106647883331.dkr.ecr.ca-central-1.amazonaws.com/merchant/catalog:latest@sha256:e5f46184db2cb8299bdc50fe4dcd85cb013ce51a7e911fd60fbbffb80517629c
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: aws
        Name: catalog
      Cpu: "256"
      ExecutionRoleArn:
        Ref: CatalogTaskExecutionRole
      Family: aws-catalog
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  CatalogTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      - Key: com.docker.compose.service
        Value: catalog
    Type: AWS::IAM::Role
  CloudMap:
    Properties:
      Description: Service Map for Docker Compose project aws
      Name: aws.local
      Vpc: vpc-f441ca89
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
  Cluster:
    Properties:
      ClusterName: aws
      Tags:
      - Key: com.docker.compose.project
        Value: aws
    Type: AWS::ECS::Cluster
  Default80Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: nginx:80/tcp on default network
      FromPort: 80
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: TCP
      ToPort: 80
    Type: AWS::EC2::SecurityGroupIngress
  DefaultNetwork:
    Properties:
      GroupDescription: aws Security Group for default network
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      - Key: com.docker.compose.network
        Value: aws_default
      VpcId: vpc-f441ca89
    Type: AWS::EC2::SecurityGroup
  DefaultNetworkIngress:
    Properties:
      Description: Allow communication within network default
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: DefaultNetwork
    Type: AWS::EC2::SecurityGroupIngress
  LoadBalancer:
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - Ref: DefaultNetwork
      Subnets:
      - subnet-136e605e
      - subnet-ce7237ef
      - subnet-623f443d
      - subnet-bc8e0c8d
      - subnet-bfd2add9
      - subnet-a28fbeac
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      Type: application
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  LogGroup:
    Properties:
      LogGroupName: /docker-compose/aws
    Type: AWS::Logs::LogGroup
  NginxAutoScalingRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: application-autoscaling.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - application-autoscaling:*
            - ecs:DescribeServices
            - ecs:UpdateService
            - cloudwatch:GetMetricStatistics
            Condition: {}
            Effect: Allow
            Principal: {}
            Resource:
            - Ref: NginxService
        PolicyName: service-autoscaling
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      - Key: com.docker.compose.service
        Value: nginx
    Type: AWS::IAM::Role
  NginxScalableTarget:
    DependsOn:
    - NginxService
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId:
        Fn::Join:
        - /
        - - service
          - Ref: Cluster
          - Fn::GetAtt:
            - NginxService
            - Name
      RoleARN:
        Fn::GetAtt:
        - NginxAutoScalingRole
        - Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    Type: AWS::ApplicationAutoScaling::ScalableTarget
  NginxScalingPolicy:
    Properties:
      PolicyName: NginxScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: NginxScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        TargetValue: 75
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
  NginxService:
    DependsOn:
    - NginxTCP80Listener
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: nginx
        ContainerPort: 80
        TargetGroupArn:
          Ref: NginxTCP80TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-136e605e
          - subnet-ce7237ef
          - subnet-623f443d
          - subnet-bc8e0c8d
          - subnet-bfd2add9
          - subnet-a28fbeac
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - NginxServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      - Key: com.docker.compose.service
        Value: nginx
      TaskDefinition:
        Ref: NginxTaskDefinition
    Type: AWS::ECS::Service
  NginxServiceDiscoveryEntry:
    Properties:
      Description: '"nginx" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: nginx
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  NginxTCP80Listener:
    Properties:
      DefaultActions:
      - ForwardConfig:
          TargetGroups:
          - TargetGroupArn:
              Ref: NginxTCP80TargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 80
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  NginxTCP80TargetGroup:
    Properties:
      Port: 80
      Protocol: HTTP
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      TargetType: ip
      VpcId: vpc-f441ca89
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  NginxTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - aws.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: aws
        Name: Nginx_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Nginx_ResolvConf_InitContainer
        Essential: true
        Image: 106647883331.dkr.ecr.ca-central-1.amazonaws.com/merchant/nginx:latest@sha256:a5271d011505dfde07f2ba991d8424bbf3224bc83ffda49cd113606176a79ba9
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: aws
        Name: nginx
        PortMappings:
        - ContainerPort: 80
          HostPort: 80
          Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Ref: NginxTaskExecutionRole
      Family: aws-nginx
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  NginxTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      - Key: com.docker.compose.service
        Value: nginx
    Type: AWS::IAM::Role
  OrdersAutoScalingRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: application-autoscaling.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - application-autoscaling:*
            - ecs:DescribeServices
            - ecs:UpdateService
            - cloudwatch:GetMetricStatistics
            Condition: {}
            Effect: Allow
            Principal: {}
            Resource:
            - Ref: OrdersService
        PolicyName: service-autoscaling
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      - Key: com.docker.compose.service
        Value: orders
    Type: AWS::IAM::Role
  OrdersScalableTarget:
    DependsOn:
    - OrdersService
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId:
        Fn::Join:
        - /
        - - service
          - Ref: Cluster
          - Fn::GetAtt:
            - OrdersService
            - Name
      RoleARN:
        Fn::GetAtt:
        - OrdersAutoScalingRole
        - Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    Type: AWS::ApplicationAutoScaling::ScalableTarget
  OrdersScalingPolicy:
    Properties:
      PolicyName: OrdersScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: OrdersScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        TargetValue: 75
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
  OrdersService:
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-136e605e
          - subnet-ce7237ef
          - subnet-623f443d
          - subnet-bc8e0c8d
          - subnet-bfd2add9
          - subnet-a28fbeac
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - OrdersServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      - Key: com.docker.compose.service
        Value: orders
      TaskDefinition:
        Ref: OrdersTaskDefinition
    Type: AWS::ECS::Service
  OrdersServiceDiscoveryEntry:
    Properties:
      Description: '"orders" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: orders
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  OrdersTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - aws.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: aws
        Name: Orders_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Orders_ResolvConf_InitContainer
        Environment:
        - Name: CORS_ORIGIN
          Value: http://127.0.0.1:3000
        - Name: DB
          Value: MERCHANT
        - Name: EXPRESS_PORT
          Value: "80"
        - Name: HOST
          Value: database-1.copsfdbli8nn.us-east-1.rds.amazonaws.com
        - Name: PASSWORD
          Value: password
        - Name: PORT
          Value: "3306"
        - Name: USER
          Value: user
        Essential: true
        Image: 106647883331.dkr.ecr.ca-central-1.amazonaws.com/merchant/orders:latest@sha256:9b96a52b49026e2cf0bcce1d9b9a2873dd4751074211b4a3068ecae86a7c7833
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: aws
        Name: orders
      Cpu: "256"
      ExecutionRoleArn:
        Ref: OrdersTaskExecutionRole
      Family: aws-orders
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  OrdersTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      - Key: com.docker.compose.service
        Value: orders
    Type: AWS::IAM::Role
  PaymentAutoScalingRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: application-autoscaling.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - application-autoscaling:*
            - ecs:DescribeServices
            - ecs:UpdateService
            - cloudwatch:GetMetricStatistics
            Condition: {}
            Effect: Allow
            Principal: {}
            Resource:
            - Ref: PaymentService
        PolicyName: service-autoscaling
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      - Key: com.docker.compose.service
        Value: payment
    Type: AWS::IAM::Role
  PaymentScalableTarget:
    DependsOn:
    - PaymentService
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId:
        Fn::Join:
        - /
        - - service
          - Ref: Cluster
          - Fn::GetAtt:
            - PaymentService
            - Name
      RoleARN:
        Fn::GetAtt:
        - PaymentAutoScalingRole
        - Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    Type: AWS::ApplicationAutoScaling::ScalableTarget
  PaymentScalingPolicy:
    Properties:
      PolicyName: PaymentScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: PaymentScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        TargetValue: 75
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
  PaymentService:
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-136e605e
          - subnet-ce7237ef
          - subnet-623f443d
          - subnet-bc8e0c8d
          - subnet-bfd2add9
          - subnet-a28fbeac
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - PaymentServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      - Key: com.docker.compose.service
        Value: payment
      TaskDefinition:
        Ref: PaymentTaskDefinition
    Type: AWS::ECS::Service
  PaymentServiceDiscoveryEntry:
    Properties:
      Description: '"payment" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: payment
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  PaymentTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - aws.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: aws
        Name: Payment_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Payment_ResolvConf_InitContainer
        Environment:
        - Name: CORS_ORIGIN
          Value: http://127.0.0.1:3000
        - Name: DB
          Value: MERCHANT
        - Name: EXPRESS_PORT
          Value: "80"
        - Name: HOST
          Value: database-1.copsfdbli8nn.us-east-1.rds.amazonaws.com
        - Name: PASSWORD
          Value: password
        - Name: PORT
          Value: "3306"
        - Name: USER
          Value: user
        Essential: true
        Image: 106647883331.dkr.ecr.ca-central-1.amazonaws.com/merchant/payment:latest@sha256:0e1ccfbdfb6d7ccdda778acca2a49a9761740a4ef582bbf091f20890108c1942
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: aws
        Name: payment
      Cpu: "256"
      ExecutionRoleArn:
        Ref: PaymentTaskExecutionRole
      Family: aws-payment
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  PaymentTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      - Key: com.docker.compose.service
        Value: payment
    Type: AWS::IAM::Role
  ReviewsAutoScalingRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: application-autoscaling.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - application-autoscaling:*
            - ecs:DescribeServices
            - ecs:UpdateService
            - cloudwatch:GetMetricStatistics
            Condition: {}
            Effect: Allow
            Principal: {}
            Resource:
            - Ref: ReviewsService
        PolicyName: service-autoscaling
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      - Key: com.docker.compose.service
        Value: reviews
    Type: AWS::IAM::Role
  ReviewsScalableTarget:
    DependsOn:
    - ReviewsService
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId:
        Fn::Join:
        - /
        - - service
          - Ref: Cluster
          - Fn::GetAtt:
            - ReviewsService
            - Name
      RoleARN:
        Fn::GetAtt:
        - ReviewsAutoScalingRole
        - Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    Type: AWS::ApplicationAutoScaling::ScalableTarget
  ReviewsScalingPolicy:
    Properties:
      PolicyName: ReviewsScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: ReviewsScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        TargetValue: 75
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
  ReviewsService:
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-136e605e
          - subnet-ce7237ef
          - subnet-623f443d
          - subnet-bc8e0c8d
          - subnet-bfd2add9
          - subnet-a28fbeac
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - ReviewsServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      - Key: com.docker.compose.service
        Value: reviews
      TaskDefinition:
        Ref: ReviewsTaskDefinition
    Type: AWS::ECS::Service
  ReviewsServiceDiscoveryEntry:
    Properties:
      Description: '"reviews" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: reviews
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  ReviewsTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - aws.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: aws
        Name: Reviews_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Reviews_ResolvConf_InitContainer
        Environment:
        - Name: CORS_ORIGIN
          Value: http://127.0.0.1:3000
        - Name: DB
          Value: MERCHANT
        - Name: EXPRESS_PORT
          Value: "80"
        - Name: HOST
          Value: database-1.copsfdbli8nn.us-east-1.rds.amazonaws.com
        - Name: PASSWORD
          Value: password
        - Name: PORT
          Value: "3306"
        - Name: USER
          Value: user
        Essential: true
        Image: 106647883331.dkr.ecr.ca-central-1.amazonaws.com/merchant/reviews:latest@sha256:b2b033f1c902a5e1bd02ebc9008dd941014d0a42095570ed78ac18295295572d
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: aws
        Name: reviews
      Cpu: "256"
      ExecutionRoleArn:
        Ref: ReviewsTaskExecutionRole
      Family: aws-reviews
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  ReviewsTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      - Key: com.docker.compose.service
        Value: reviews
    Type: AWS::IAM::Role
  ShoppingcartAutoScalingRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: application-autoscaling.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - application-autoscaling:*
            - ecs:DescribeServices
            - ecs:UpdateService
            - cloudwatch:GetMetricStatistics
            Condition: {}
            Effect: Allow
            Principal: {}
            Resource:
            - Ref: ShoppingcartService
        PolicyName: service-autoscaling
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      - Key: com.docker.compose.service
        Value: shopping-cart
    Type: AWS::IAM::Role
  ShoppingcartScalableTarget:
    DependsOn:
    - ShoppingcartService
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId:
        Fn::Join:
        - /
        - - service
          - Ref: Cluster
          - Fn::GetAtt:
            - ShoppingcartService
            - Name
      RoleARN:
        Fn::GetAtt:
        - ShoppingcartAutoScalingRole
        - Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    Type: AWS::ApplicationAutoScaling::ScalableTarget
  ShoppingcartScalingPolicy:
    Properties:
      PolicyName: ShoppingcartScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: ShoppingcartScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        TargetValue: 75
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
  ShoppingcartService:
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-136e605e
          - subnet-ce7237ef
          - subnet-623f443d
          - subnet-bc8e0c8d
          - subnet-bfd2add9
          - subnet-a28fbeac
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - ShoppingcartServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      - Key: com.docker.compose.service
        Value: shopping-cart
      TaskDefinition:
        Ref: ShoppingcartTaskDefinition
    Type: AWS::ECS::Service
  ShoppingcartServiceDiscoveryEntry:
    Properties:
      Description: '"shopping-cart" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: shopping-cart
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  ShoppingcartTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - aws.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: aws
        Name: Shoppingcart_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Shoppingcart_ResolvConf_InitContainer
        Environment:
        - Name: CORS_ORIGIN
          Value: http://127.0.0.1:3000
        - Name: DB
          Value: MERCHANT
        - Name: EXPRESS_PORT
          Value: "80"
        - Name: HOST
          Value: database-1.copsfdbli8nn.us-east-1.rds.amazonaws.com
        - Name: PASSWORD
          Value: password
        - Name: PORT
          Value: "3306"
        - Name: USER
          Value: user
        Essential: true
        Image: 106647883331.dkr.ecr.ca-central-1.amazonaws.com/merchant/shopping-cart:latest@sha256:d6fcab1d860072b1b1d0aeb83c4581ea133889492ef84f59a2b1c53a00df27b3
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: aws
        Name: shopping-cart
      Cpu: "256"
      ExecutionRoleArn:
        Ref: ShoppingcartTaskExecutionRole
      Family: aws-shopping-cart
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  ShoppingcartTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      - Key: com.docker.compose.service
        Value: shopping-cart
    Type: AWS::IAM::Role
  VisitingAutoScalingRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: application-autoscaling.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - application-autoscaling:*
            - ecs:DescribeServices
            - ecs:UpdateService
            - cloudwatch:GetMetricStatistics
            Condition: {}
            Effect: Allow
            Principal: {}
            Resource:
            - Ref: VisitingService
        PolicyName: service-autoscaling
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      - Key: com.docker.compose.service
        Value: visiting
    Type: AWS::IAM::Role
  VisitingScalableTarget:
    DependsOn:
    - VisitingService
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId:
        Fn::Join:
        - /
        - - service
          - Ref: Cluster
          - Fn::GetAtt:
            - VisitingService
            - Name
      RoleARN:
        Fn::GetAtt:
        - VisitingAutoScalingRole
        - Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    Type: AWS::ApplicationAutoScaling::ScalableTarget
  VisitingScalingPolicy:
    Properties:
      PolicyName: VisitingScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: VisitingScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        TargetValue: 75
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
  VisitingService:
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-136e605e
          - subnet-ce7237ef
          - subnet-623f443d
          - subnet-bc8e0c8d
          - subnet-bfd2add9
          - subnet-a28fbeac
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - VisitingServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      - Key: com.docker.compose.service
        Value: visiting
      TaskDefinition:
        Ref: VisitingTaskDefinition
    Type: AWS::ECS::Service
  VisitingServiceDiscoveryEntry:
    Properties:
      Description: '"visiting" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: visiting
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  VisitingTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - aws.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: aws
        Name: Visiting_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Visiting_ResolvConf_InitContainer
        Environment:
        - Name: CORS_ORIGIN
          Value: http://127.0.0.1:3000
        - Name: DB
          Value: MERCHANT
        - Name: EXPRESS_PORT
          Value: "80"
        - Name: HOST
          Value: database-1.copsfdbli8nn.us-east-1.rds.amazonaws.com
        - Name: PASSWORD
          Value: password
        - Name: PORT
          Value: "3306"
        - Name: USER
          Value: user
        Essential: true
        Image: 106647883331.dkr.ecr.ca-central-1.amazonaws.com/merchant/visiting:latest@sha256:4afe0452e3b364648d9a254d40ce1a883f8e3b24cf1549590a6044487beee65f
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: aws
        Name: visiting
      Cpu: "256"
      ExecutionRoleArn:
        Ref: VisitingTaskExecutionRole
      Family: aws-visiting
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  VisitingTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: aws
      - Key: com.docker.compose.service
        Value: visiting
    Type: AWS::IAM::Role
